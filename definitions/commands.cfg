################################################################################
# Sample command definitions for Nagios 2.12
#
# Read the documentation for more information on this configuration file.  I've
# provided some comments here, but things may not be so clear without further
# explanation, so make sure to read the HTML documentation!
# 
# Last Modified: 11-21-2006
#
################################################################################


################################################################################
# COMMAND DEFINITIONS
#
# SYNTAX:
#
#	define command{
#               template      <templatename>
#		name          <objectname>
#               command_name  <commandname>
#               command_line  <commandline>
#               }
#
# WHERE:
#
# <templatename> = object name of another command definition that should be
#                  used as a template for this definition (optional)
# <objectname>   = object name of command definition, referenced by other
#                  command definitions that use it as a template (optional)
# <commandname>  = name of the command, as recognized/used by Nagios
# <commandline>  = command line
#
################################################################################




################################################################################
#
# SAMPLE SERVICE CHECK COMMANDS
#
# These are some example service check commands.  They may or may not work on
# your system, as they must be modified for your plugins.  See the HTML 
# documentation on the plugins for examples of how to configure command definitions.
#
################################################################################


################################################################################
# NOTE:  The following 'check_local_...' functions are designed to monitor
#        various metrics on the host that Nagios is running on (i.e. this one).
################################################################################

# 'check_local_disk' command definition
define command{
        command_name    check_local_disk
        command_line    $USER1$/check_disk -w $ARG1$ -c $ARG2$ -p $ARG3$
        }


# 'check_local_load' command definition
define command{
        command_name    check_local_load
        command_line    $USER1$/check_load -w $ARG1$ -c $ARG2$
        }


# 'check_local_procs' command definition
define command{
        command_name    check_local_procs
        command_line    $USER1$/check_procs -w $ARG1$ -c $ARG2$ -s $ARG3$
        }


# 'check_local_users' command definition
define command{
        command_name    check_local_users
        command_line    $USER1$/check_users -w $ARG1$ -c $ARG2$
        }



################################################################################
# NOTE:  The following 'check_...' commands are used to monitor services on
#        both local and remote hosts.
################################################################################

# 'check_dns' command definition
define command{
        command_name    check_dns
        command_line    $USER1$/check_dns -H www.yahoo.com -s $HOSTADDRESS$
        }


# 'check_ftp' command definition
define command{
        command_name    check_ftp
        command_line    $USER1$/check_ftp -H $HOSTADDRESS$
        }


# 'check_hpjd' command definition
define command{
        command_name    check_hpjd
        command_line    $USER1$/check_hpjd -H $HOSTADDRESS$ -C public
        }


# 'check_nntp' command definition
define command{
        command_name    check_nntp
        command_line    $USER1$/check_nntp -H $HOSTADDRESS$
        }


# 'check_ping' command definition
define command{
        command_name    check_ping
        command_line    $USER1$/check_ping -H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$ -p 5
        }


# 'check_pop' command definition
define command{
        command_name    check_pop
        command_line    $USER1$/check_pop -H $HOSTADDRESS$
        }


# 'check_smtp' command definition
define command{
        command_name    check_smtp
        command_line    $USER1$/check_smtp -H $HOSTADDRESS$
        }


# 'check_tcp' command definition
define command{
	command_name	check_tcp
	command_line	$USER1$/check_tcp -H $HOSTADDRESS$ -p $ARG1$
	}


# 'check_telnet' command definition
define command{
        command_name    check_telnet
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 23
        }


# 'check_udp' command definition
define command{
	command_name	check_udp
	command_line	$USER1$/check_udp -H $HOSTADDRESS$ -p $ARG1$
	}

# 'check_snmp' command definition
define command{
	command_name	check_snmp
	command_line	$USER1$/check_snmp -H $HOSTADDRESS$ -o $ARG1$ -w $ARG2$ -c $ARG3$ -C $ARG4$ -P $ARG5$
	}



################################################################################
#
# SAMPLE HOST CHECK COMMANDS
#
################################################################################


# This command checks to see if a host is "alive" by pinging it
# The check must result in a 100% packet loss or 5 second (5000ms) round trip 
# average time to produce a critical error.
# Note: Only one ICMP echo packet is sent (determined by the '-p 1' argument)

# 'check-host-alive' command definition
define command{
        command_name    check-host-alive
        command_line    $USER1$/check_ping -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1
        }




################################################################################
#
# SAMPLE NOTIFICATION COMMANDS
#
# These are some example notification commands.  They may or may not work on
# your system without modification.  As an example, some systems will require 
# you to use "/usr/bin/mailx" instead of "/usr/bin/mail" in the commands below.
#
################################################################################

## 'host-notify-by-email' command definition
#define command{
#	command_name	host-notify-by-email
#	command_line	/usr/bin/printf "%b" "***** Nagios 2.12 *****\n\nNotification Type: $NOTIFICATIONTYPE$\nHost: $HOSTNAME$\nState: $HOSTSTATE$\nAddress: $HOSTADDRESS$\nInfo: $HOSTOUTPUT$\n\nDate/Time: $LONGDATETIME$\n" | /bin/mail -s "Host $HOSTSTATE$ alert for $HOSTNAME$!" $CONTACTEMAIL$
#	}

## 'notify-by-email' command definition
#define command{
#	command_name	notify-by-email
#	command_line	/usr/bin/printf "%b" "***** Nagios 2.12 *****\n\nNotification Type: $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\nHost: $HOSTALIAS$\nAddress: $HOSTADDRESS$\nState: $SERVICESTATE$\n\nDate/Time: $LONGDATETIME$\n\nAdditional Info:\n\n$SERVICEOUTPUT$" | /bin/mail -s "** $NOTIFICATIONTYPE$ alert - $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **" $CONTACTEMAIL$
#	}

define command{
        command_name    host-notify-by-email
        command_line    /usr/bin/printf "%b" "***** Nagios 2.12 *****\n\nNotification Type: $NOTIFICATIONTYPE$\nHost: $HOSTNAME$\nState: $HOSTSTATE$\nAddress: $HOSTADDRESS$\nInfo: $HOSTOUTPUT$\n\nDate/Time: $LONGDATETIME$\n" | /etc/nagios/shared/bin/pymail -s "GASP2 Host $HOSTSTATE$ alert for $HOSTNAME$!" -t $CONTACTEMAIL$ -f nagios@gasp2..com -r operations@.com
        }

define command{
        command_name    notify-by-email
        command_line    /usr/bin/printf "%b" "***** Nagios 2.12 *****\n\nNotification Type: $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\nHost: $HOSTALIAS$\nAddress: $HOSTADDRESS$\nState: $SERVICESTATE$\n\nDate/Time: $LONGDATETIME$\n\nAdditional Info:\n\n$SERVICEOUTPUT$" | /etc/nagios/shared/bin/pymail -s "GASP2 ** $NOTIFICATIONTYPE$ alert - $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **" -t $CONTACTEMAIL$ -f nagios@gasp2..com -r operations@.com
        }

define command{
        command_name    notify-by-epager
        command_line    /etc/nagios/shared/bin/mxtelecom-send-sms $CONTACTPAGER$ $HOSTNAME$ "GASP2 $SERVICEDESC$ is $SERVICESTATE$" |tee >> /tmp/test
}

#define command{
#        command_name    notify-by-epager
#        command_line    /etc/nagios/shared/bin/smssender/send-sms $CONTACTPAGER$ $HOSTADDRESS$ "GASP2 $SERVICEDESC$ is $SERVICESTATE$"
#}

define command{
        command_name    host-notify-by-epager
        command_line    /etc/nagios/shared/bin/mxtelecom-send-sms $CONTACTPAGER$ $HOSTNAME$ "GASP2 Host '$HOSTALIAS$' is $HOSTSTATE$"
}

#define command{
#        command_name    host-notify-by-epager
#        command_line    /etc/nagios/shared/bin/smssender/send-sms $CONTACTPAGER$ $HOSTADDRESS$ "GASP2 $HOSTADDRESS$ is $HOSTSTATE$"
#}



################################################################################
#
# SAMPLE PERFORMANCE DATA COMMANDS
#
# These are sample performance data commands that can be used to send performance
# data output to two text files (one for hosts, another for services).  If you
# plan on simply writing performance data out to a file, consider using the 
# host_perfdata_file and service_perfdata_file options in the main config file.
#
################################################################################


# 'process-host-perfdata' command definition
#define command{
#	command_name	process-host-perfdata
#	command_line	/usr/bin/printf "%b" "$LASTHOSTCHECK$\t$HOSTNAME$\t$HOSTSTATE$\t$HOSTATTEMPT$\t$HOSTSTATETYPE$\t$HOSTEXECUTIONTIME$\t$HOSTOUTPUT$\t$HOSTPERFDATA$\n" >> /var/log/nagios/host-perfdata.out
#	}

# 'process-service-perfdata' command definition
#define command{
#	command_name	process-service-perfdata
#	command_line	/usr/bin/printf "%b" "$LASTSERVICECHECK$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICESTATE$\t$SERVICEATTEMPT$\t$SERVICESTATETYPE$\t$SERVICEEXECUTIONTIME$\t$SERVICELATENCY$\t$SERVICEOUTPUT$\t$SERVICEPERFDATA$\n" >> /var/log/nagios/service-perfdata.out
#	}


define command {
  command_name    process-service-perfdata
  command_line    /usr/bin/perl /etc/nagios/shared/pnp/libexec/process_perfdata.pl
}

define command {
  command_name    process-host-perfdata
  command_line    /usr/bin/perl /etc/nagios/shared/pnp/libexec/process_perfdata.pl -d HOSTPERFDATA
}


################################################################################
#
# ADDED BY US
#
################################################################################

define command{
	command_name    check_http
	command_line    $USER1$/check_http -H $ARG1$ -u $ARG2$ -p $ARG3$ -w $ARG4$ -c $ARG5$
}

define command{
	command_name    check_ssh
	command_line    $USER1$/check_ssh $HOSTADDRESS$
}

define command{
	# host
	# check (sync, traffic, cpu)
	# SNMP community
	# warning
	# critical
        command_name    check_F5_snmp
        command_line    $USER1$/check_F5.sh $ARG1$ $ARG2$ $ARG3$ $ARG4$ $ARG5$ $ARG6$
}

define command{
        command_name    check_messagelogs_reverse
        command_line    $USER1$/check_messagelogs.py -s '$ARG1$' -t $ARG2$ -l $ARG3$ -w $ARG4$ -c $ARG5$ -r
}

define command{
        command_name    check_messagelogs_F5
        command_line    $USER1$/check_messagelogs.py -s '$ARG1$' -l $ARG2$ -w $ARG3$ -c $ARG4$ -r -t F5
}

define command{
	# Checks Cisco Fan Status, Power Suply and Temperature
        command_name    check_cisco_fan-power-temp
	command_line	$USER1$/check_snmp_environment.pl -T cisco -C $ARG1$ -H $HOSTADDRESS$
}

define command{
        # Checks Cisco Cards and Modules
        command_name    check_cisco_cards-modules
        command_line    $USER1$/check_snmp_environment.pl -T ciscoSW -C $ARG1$ -H $HOSTADDRESS$
}

define command{
	# Checks either load or memory usage
        command_name    check_cisco
        command_line    $USER1$/check_cisco.sh $HOSTADDRESS$ $ARG1$ $ARG2$ $ARG3$
}

define command{
        command_name    check_proc
        command_line    $USER1$/check_procs -w $ARG1$ -c $ARG2$ -a $ARG3$
}

define command {
        command_name    check_nrpe
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -n -t 20 -c $ARG1$ -a $ARG2$
	# -a: [arglist]  = Optional arguments that should be passed to the command.  Multiple arguments should be separated by a space. 
}

define command {
        command_name    check_netapp
        #command_line    $USER1$/check_netapp -H $HOSTADDRESS$ -C $ARG1$ -v $ARG2$ -P 2 -w $ARG3$ -c $ARG4$
        command_line    $USER1$/check_netapp -H $HOSTADDRESS$ -C $ARG1$ -v $ARG2$ 
	# $ARG2$ can be 
	#	 CPULOAD - CPU load
        #        DISKUSED - disk space used
        #        FAN - fail fan state
        #        NVRAM - nvram battery status
        #        PS - power supply
        #        SNAPSHOT - volume snapshot status
        #        TEMP - over temperature check
        #        UPTIME - up time
}

define command{
        ;checks JMS (swiftmq) High Availability. ARG1=swiftmq1, ARG2=swiftmq2
        command_name    check_swiftmq_ha
        command_line    $USER1$/swiftmq/check_swiftmq_ha.sh $ARG1$ $ARG2$ 
}

define command {
        command_name    check_bandwidth
        command_line    $USER1$/check_snmp_netint.pl -H $HOSTADDRESS$ -C $ARG1$ -n $ARG2$ -k -f -e -w $ARG3$ -c $ARG4$ -o 65534
        #command_line    $USER1$/check_snmp_netint.pl -H $HOSTADDRESS$ -C $ARG1$ -n $ARG2$ -k -w $ARG3$ -c $ARG4$ -o 65534 -Y
}

define command {
	# This command has been created because check_snmp_int.pl can't deal with interface names such as GigabitEthernet0/1 when using regular expressions
        command_name    check_bandwidth_noregex
        command_line    $USER1$/check_snmp_netint.pl -H $HOSTADDRESS$ -C $ARG1$ -n $ARG2$ -k -f -e -r -w $ARG3$ -c $ARG4$ -o 65534 -Y
}

define command {
        command_name    check_multiple_interfaces
	# Only the last 4 characters of the description are shown (-s -4)
        command_line    $USER1$/check_snmp_netint.pl -H $HOSTADDRESS$ -k -m -M -o 65365 -s -4 -n $ARG1$ -C $ARG2$ -w $ARG3$ -c $ARG4$ -Y
}

define command {
        command_name 	check_disks_snmp
        command_line 	$USER1$/check_disks_ucd -H $HOSTADDRESS$ -C $ARG1$ # snmp community
}

define command {
        command_name    OSPF-neighbour-failures
        command_line    $USER1$/OSPF_ChangesDetector.sh
}

define command {
        command_name    check-multi-nrpe
        command_line    $USER1$/check_multiple_nrpe.sh $ARG1$ $ARG2$ $ARG3$
	# hostname1 hostname2 nrpe-command
}

define command {
        command_name    check_memory
        command_line    $USER1$/check_snmp_mem.pl -H $HOSTADDRESS$ -C $ARG1$ -w $ARG2$ -c $ARG3$
	# $ARG1$ = SNMP community
	# $ARG2$ = warning (memory percentage, swap percentage)
	# $ARG3$ = critical (memory percentage, swap percentage)
}

define command {
        command_name    check_jmx
        command_line    $USER1$/check_jmx.sh -h $HOSTADDRESS$ -C $ARG1$ -u $ARG2$ -m $ARG3$ -w $ARG4$ -c $ARG5$
        # $ARG1$ = SNMP community
        # $ARG2$ = SNMP OID for current opened files
        # $ARG3$ = SNMP OID for max opened files
        # $ARG4$ = warning (percentage, without %)
        # $ARG5$ = critical (percentage, without %)
}

define command{
        command_name   check_sendsms
        # Checks whether there was a problem sending a Nagios notification text.
        command_line    $USER1$/check_send-sms.sh
}

# Event Handler (Bruno)
define command{
        command_name    generic_eventhandler
        command_line    $USER1$/eventhandlers/generic_eventhandler.sh $SERVICESTATE$ $SERVICESTATETYPE$ $SERVICEATTEMPT$ $HOSTNAME$ "$SERVICEDESC$" $SERVICEDOWNTIME$
}

define command {
	# Higher timeout and unknown on socket timeouts
        command_name    check_nrpe_moc_stats
        command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -n -u -t 40 -c $ARG1$ -a $ARG2$
}

