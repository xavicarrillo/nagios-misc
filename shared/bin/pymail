#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Written by xavi carrillo (xcarrillo@domain.com)
#

"""
python tool to send e-mails.
"""
__version__ = "0.1"

usage = """
%prog [options]
Python tool to send e-mails. Intended to be used with nagios when no local smtp is available
Use --help to view options
"""

import smtplib
from optparse import OptionParser
from sys import stdin,exit

def main():

	sender = 'nagios01@gasp2.domain.com'
	smtpserver = 'nbg2-mx.lan.gasp2.domain.com'
	authrequired = 0
	smtpuser = ''
	smtppass = '' 

	parser = OptionParser(usage, version=__version__)
	
	parser.add_option("-m", "--message", action="store", dest="message", type="string", help="Body of the message. Default is Standard Input. If both are used, stdin will prevail")
	parser.add_option("-t", "--to", action="store", dest="to", type="string", help="list of destination addresses")
	parser.add_option("-f", "--from", action="store", dest="mailfrom", type="string", help="fake 'From:' header")
	parser.add_option("-r", "--replyto", action="store", dest="replyto", type="string", help="fake 'Reply-To:' header")
	parser.add_option("-s", "--subject", action="store", dest="subject", type="string", help="Subject for the email")

	(options, args) = parser.parse_args()

	if not stdin.isatty():
		options.message = stdin.read()	
	if not options.to:
		parser.error("'To:' address is mandatory")
	#if not options.mailfrom:
	#	parser.error("'From:' is mandatory")
	if not options.replyto:
		options.replyto = options.mailfrom

	Subject = 'Subject: %s\r\n' % (options.subject)
	ReplyTo = 'Reply-To: %s\r\n' % (options.replyto)
	From = 'From: %s\r\n' % (options.mailfrom)
	To = 'To: %s\r\n' % (options.to)
	
	headers = From + ReplyTo + To + Subject
	email = headers + '\r\n' + options.message

	session = smtplib.SMTP(smtpserver)
	if authrequired:
	    session.login(smtpuser, smtppass)
	smtpresult = session.sendmail(options.mailfrom, options.to, email)

	if smtpresult:
	    errstr = ""
	    for recip in smtpresult.keys():
		errstr = """Could not delivery mail to: %s

	Server said: %s
	%s

	%s""" % (recip, smtpresult[recip][0], smtpresult[recip][1], errstr)
	    raise smtplib.SMTPException, errstr

if __name__ == "__main__":
        main()

